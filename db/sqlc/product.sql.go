// Code generated by sqlc. DO NOT EDIT.
// source: product.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO
    products (name, cost, quantity)
VALUES ($1, $2, $3) RETURNING id, name, cost, quantity, created_at
`

type CreateProductParams struct {
	Name     string `json:"name"`
	Cost     int64  `json:"cost"`
	Quantity int64  `json:"quantity"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct, arg.Name, arg.Cost, arg.Quantity)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cost,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT
    id, name, cost, quantity, created_at
FROM
    products
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cost,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT
    id, name, cost, quantity, created_at
FROM
    products
ORDER BY
    id
LIMIT
    $1
OFFSET
    $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cost,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE
    products
SET
    quantity = $2
WHERE
    id = $1 RETURNING id, name, cost, quantity, created_at
`

type UpdateProductParams struct {
	ID       int64 `json:"id"`
	Quantity int64 `json:"quantity"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct, arg.ID, arg.Quantity)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cost,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}
